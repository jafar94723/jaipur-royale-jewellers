{"ast":null,"code":"var _jsxFileName = \"/home/maaz/git_repos/cara-sense-clothing/src/components/cart-icon/cart-icon.component.jsx\";\nimport React from 'react';\nimport './cart-icon.styles.scss';\nimport { ReactComponent as ShoppingIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/shopping-bag.svg\";\nimport { connect } from 'react-redux';\nimport { toggleCartHidden } from '../../redux/cart/cart.actions';\n\nconst CartIcon = ({\n  itemCount,\n  toggleCartHidden\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"cart-icon\",\n  onClick: toggleCartHidden,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(ShoppingIcon, {\n  className: \"shopping-icon\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(\"span\", {\n  className: \"item-count\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }\n}, itemCount));\n\nconst mapStateToProps = () => ({\n  itemCount: selectCartItemsCount\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleCartHidden: () => dispatch(toggleCartHidden())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CartIcon);\n/*\n\nconst mapStateToProps = ({ cartReducer: { cartItems } }) => ({\n    itemCount: cartItems.reduce((acc, item) => acc + item.quantity, 0)\n})\n\nThis is a selector : extracting some property from state.\n\nWhenever any reducer updates, redux recomposes entire state object\n\ncartItems get a new reference. React detects change.\nRerenders.\n\nBADD!!\n\n1. cartItem will get a new reference whenever ANY reducer is called\n2. cartItem even tho has same items, will still get a new reference.\n\n\nCauses re-renders.\n\n\n\n*/","map":{"version":3,"sources":["/home/maaz/git_repos/cara-sense-clothing/src/components/cart-icon/cart-icon.component.jsx"],"names":["React","connect","toggleCartHidden","CartIcon","itemCount","mapStateToProps","selectCartItemsCount","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP;;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,+BAAjC;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaF,EAAAA;AAAb,CAAD,kBACb;AAAK,EAAA,SAAS,EAAC,WAAf;AAA2B,EAAA,OAAO,EAAEA,gBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI,oBAAC,YAAD;AAAc,EAAA,SAAS,EAAC,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,eAGI;AAAM,EAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA8BE,SAA9B,CAHJ,CADJ;;AAQA,MAAMC,eAAe,GAAG,OAAO;AAC3BD,EAAAA,SAAS,EAAEE;AADgB,CAAP,CAAxB;;AAIA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpCN,EAAAA,gBAAgB,EAAE,MAAMM,QAAQ,CAACN,gBAAgB,EAAjB;AADI,CAAL,CAAnC;;AAIA,eAAeD,OAAO,CAACI,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CJ,QAA7C,CAAf;AAGA","sourcesContent":["import React from 'react';\nimport './cart-icon.styles.scss';\nimport { ReactComponent as ShoppingIcon } from '../../assets/shopping-bag.svg';\nimport { connect } from 'react-redux';\nimport { toggleCartHidden } from '../../redux/cart/cart.actions';\nconst CartIcon = ({ itemCount, toggleCartHidden }) => (\n    <div className='cart-icon' onClick={toggleCartHidden}>\n        <ShoppingIcon className='shopping-icon' />\n        {/* span doesn't cause a break before/after it comes. used to hook css to an inline element. */}\n        <span className='item-count'>{itemCount}</span>\n    </div>\n)\n\nconst mapStateToProps = () => ({\n    itemCount: selectCartItemsCount\n})\n\nconst mapDispatchToProps = dispatch => ({\n    toggleCartHidden: () => dispatch(toggleCartHidden())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CartIcon);\n\n\n/*\n\nconst mapStateToProps = ({ cartReducer: { cartItems } }) => ({\n    itemCount: cartItems.reduce((acc, item) => acc + item.quantity, 0)\n})\n\nThis is a selector : extracting some property from state.\n\nWhenever any reducer updates, redux recomposes entire state object\n\ncartItems get a new reference. React detects change.\nRerenders.\n\nBADD!!\n\n1. cartItem will get a new reference whenever ANY reducer is called\n2. cartItem even tho has same items, will still get a new reference.\n\n\nCauses re-renders.\n\n\n\n*/"]},"metadata":{},"sourceType":"module"}